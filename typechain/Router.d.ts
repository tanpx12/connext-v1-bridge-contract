/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RouterInterface extends ethers.utils.Interface {
  functions: {
    "addRelayerFee(uint256,address)": FunctionFragment;
    "cancel(((address,address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),bytes,bytes),address,uint256,bytes)": FunctionFragment;
    "fulfill(((address,address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes,bytes),address,uint256,bytes)": FunctionFragment;
    "init(address,uint256,address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "prepare(((address,address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes,bytes),address,uint256,bytes)": FunctionFragment;
    "recipient()": FunctionFragment;
    "removeLiquidity(uint256,address,address,uint256,bytes)": FunctionFragment;
    "removeRelayerFee(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "routerFactory()": FunctionFragment;
    "routerSigner()": FunctionFragment;
    "setRecipient(address)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "transactionManager()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRelayerFee",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [
      {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        signature: BytesLike;
        encodedMeta: BytesLike;
      },
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [
      {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        relayerFee: BigNumberish;
        signature: BytesLike;
        callData: BytesLike;
        encodedMeta: BytesLike;
      },
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepare",
    values: [
      {
        invariantData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          callDataHash: BytesLike;
          transactionId: BytesLike;
        };
        amount: BigNumberish;
        expiry: BigNumberish;
        encryptedCallData: BytesLike;
        encodedBid: BytesLike;
        bidSignature: BytesLike;
        encodedMeta: BytesLike;
      },
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "recipient", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayerFee",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipient",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transactionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRelayerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Cancel(tuple,address,uint256,address)": EventFragment;
    "Fulfill(tuple,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Prepare(tuple,address,uint256,address)": EventFragment;
    "RelayerFeeAdded(address,uint256,address)": EventFragment;
    "RelayerFeeRemoved(address,uint256,address)": EventFragment;
    "RemoveLiquidity(uint256,address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Fulfill"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Prepare"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerFeeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerFeeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
}

export type CancelEvent = TypedEvent<
  [
    [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      receivingChainTxManagerAddress: string;
      user: string;
      router: string;
      initiator: string;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainFallback: string;
      receivingAddress: string;
      callTo: string;
      callDataHash: string;
      transactionId: string;
      sendingChainId: BigNumber;
      receivingChainId: BigNumber;
      amount: BigNumber;
      expiry: BigNumber;
      preparedBlockNumber: BigNumber;
    },
    string,
    BigNumber,
    string
  ] & {
    txData: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      receivingChainTxManagerAddress: string;
      user: string;
      router: string;
      initiator: string;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainFallback: string;
      receivingAddress: string;
      callTo: string;
      callDataHash: string;
      transactionId: string;
      sendingChainId: BigNumber;
      receivingChainId: BigNumber;
      amount: BigNumber;
      expiry: BigNumber;
      preparedBlockNumber: BigNumber;
    };
    routerRelayerFeeAsset: string;
    routerRelayerFee: BigNumber;
    caller: string;
  }
>;

export type FulfillEvent = TypedEvent<
  [
    [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      receivingChainTxManagerAddress: string;
      user: string;
      router: string;
      initiator: string;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainFallback: string;
      receivingAddress: string;
      callTo: string;
      callDataHash: string;
      transactionId: string;
      sendingChainId: BigNumber;
      receivingChainId: BigNumber;
      amount: BigNumber;
      expiry: BigNumber;
      preparedBlockNumber: BigNumber;
    },
    string,
    BigNumber,
    string
  ] & {
    txData: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      receivingChainTxManagerAddress: string;
      user: string;
      router: string;
      initiator: string;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainFallback: string;
      receivingAddress: string;
      callTo: string;
      callDataHash: string;
      transactionId: string;
      sendingChainId: BigNumber;
      receivingChainId: BigNumber;
      amount: BigNumber;
      expiry: BigNumber;
      preparedBlockNumber: BigNumber;
    };
    routerRelayerFeeAsset: string;
    routerRelayerFee: BigNumber;
    caller: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PrepareEvent = TypedEvent<
  [
    [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      receivingChainTxManagerAddress: string;
      user: string;
      router: string;
      initiator: string;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainFallback: string;
      receivingAddress: string;
      callTo: string;
      sendingChainId: BigNumber;
      receivingChainId: BigNumber;
      callDataHash: string;
      transactionId: string;
    },
    string,
    BigNumber,
    string
  ] & {
    invariantData: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string
    ] & {
      receivingChainTxManagerAddress: string;
      user: string;
      router: string;
      initiator: string;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainFallback: string;
      receivingAddress: string;
      callTo: string;
      sendingChainId: BigNumber;
      receivingChainId: BigNumber;
      callDataHash: string;
      transactionId: string;
    };
    routerRelayerFeeAsset: string;
    routerRelayerFee: BigNumber;
    caller: string;
  }
>;

export type RelayerFeeAddedEvent = TypedEvent<
  [string, BigNumber, string] & {
    assetId: string;
    amount: BigNumber;
    caller: string;
  }
>;

export type RelayerFeeRemovedEvent = TypedEvent<
  [string, BigNumber, string] & {
    assetId: string;
    amount: BigNumber;
    caller: string;
  }
>;

export type RemoveLiquidityEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string] & {
    amount: BigNumber;
    assetId: string;
    routerRelayerFeeAsset: string;
    routerRelayerFee: BigNumber;
    caller: string;
  }
>;

export class Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RouterInterface;

  functions: {
    addRelayerFee(
      amount: BigNumberish,
      assetId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        signature: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfill(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        relayerFee: BigNumberish;
        signature: BytesLike;
        callData: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _transactionManager: string,
      _chainId: BigNumberish,
      _routerSigner: string,
      _recipient: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prepare(
      args: {
        invariantData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          callDataHash: BytesLike;
          transactionId: BytesLike;
        };
        amount: BigNumberish;
        expiry: BigNumberish;
        encryptedCallData: BytesLike;
        encodedBid: BytesLike;
        bidSignature: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recipient(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRelayerFee(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    routerFactory(overrides?: CallOverrides): Promise<[string]>;

    routerSigner(overrides?: CallOverrides): Promise<[string]>;

    setRecipient(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      _routerSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transactionManager(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addRelayerFee(
    amount: BigNumberish,
    assetId: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    args: {
      txData: {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: BytesLike;
        transactionId: BytesLike;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        amount: BigNumberish;
        expiry: BigNumberish;
        preparedBlockNumber: BigNumberish;
      };
      signature: BytesLike;
      encodedMeta: BytesLike;
    },
    routerRelayerFeeAsset: string,
    routerRelayerFee: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfill(
    args: {
      txData: {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: BytesLike;
        transactionId: BytesLike;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        amount: BigNumberish;
        expiry: BigNumberish;
        preparedBlockNumber: BigNumberish;
      };
      relayerFee: BigNumberish;
      signature: BytesLike;
      callData: BytesLike;
      encodedMeta: BytesLike;
    },
    routerRelayerFeeAsset: string,
    routerRelayerFee: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _transactionManager: string,
    _chainId: BigNumberish,
    _routerSigner: string,
    _recipient: string,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  prepare(
    args: {
      invariantData: {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        callDataHash: BytesLike;
        transactionId: BytesLike;
      };
      amount: BigNumberish;
      expiry: BigNumberish;
      encryptedCallData: BytesLike;
      encodedBid: BytesLike;
      bidSignature: BytesLike;
      encodedMeta: BytesLike;
    },
    routerRelayerFeeAsset: string,
    routerRelayerFee: BigNumberish,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recipient(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    amount: BigNumberish,
    assetId: string,
    routerRelayerFeeAsset: string,
    routerRelayerFee: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRelayerFee(
    amount: BigNumberish,
    assetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  routerFactory(overrides?: CallOverrides): Promise<string>;

  routerSigner(overrides?: CallOverrides): Promise<string>;

  setRecipient(
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    _routerSigner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transactionManager(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRelayerFee(
      amount: BigNumberish,
      assetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        signature: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      }
    >;

    fulfill(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        relayerFee: BigNumberish;
        signature: BytesLike;
        callData: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      }
    >;

    init(
      _transactionManager: string,
      _chainId: BigNumberish,
      _routerSigner: string,
      _recipient: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    prepare(
      args: {
        invariantData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          callDataHash: BytesLike;
          transactionId: BytesLike;
        };
        amount: BigNumberish;
        expiry: BigNumberish;
        encryptedCallData: BytesLike;
        encodedBid: BytesLike;
        bidSignature: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      }
    >;

    recipient(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRelayerFee(
      amount: BigNumberish,
      assetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    routerFactory(overrides?: CallOverrides): Promise<string>;

    routerSigner(overrides?: CallOverrides): Promise<string>;

    setRecipient(_recipient: string, overrides?: CallOverrides): Promise<void>;

    setSigner(_routerSigner: string, overrides?: CallOverrides): Promise<void>;

    transactionManager(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Cancel(tuple,address,uint256,address)"(
      txData?: null,
      routerRelayerFeeAsset?: null,
      routerRelayerFee?: null,
      caller?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        },
        string,
        BigNumber,
        string
      ],
      {
        txData: [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        };
        routerRelayerFeeAsset: string;
        routerRelayerFee: BigNumber;
        caller: string;
      }
    >;

    Cancel(
      txData?: null,
      routerRelayerFeeAsset?: null,
      routerRelayerFee?: null,
      caller?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        },
        string,
        BigNumber,
        string
      ],
      {
        txData: [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        };
        routerRelayerFeeAsset: string;
        routerRelayerFee: BigNumber;
        caller: string;
      }
    >;

    "Fulfill(tuple,address,uint256,address)"(
      txData?: null,
      routerRelayerFeeAsset?: null,
      routerRelayerFee?: null,
      caller?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        },
        string,
        BigNumber,
        string
      ],
      {
        txData: [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        };
        routerRelayerFeeAsset: string;
        routerRelayerFee: BigNumber;
        caller: string;
      }
    >;

    Fulfill(
      txData?: null,
      routerRelayerFeeAsset?: null,
      routerRelayerFee?: null,
      caller?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        },
        string,
        BigNumber,
        string
      ],
      {
        txData: [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        };
        routerRelayerFeeAsset: string;
        routerRelayerFee: BigNumber;
        caller: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Prepare(tuple,address,uint256,address)"(
      invariantData?: null,
      routerRelayerFeeAsset?: null,
      routerRelayerFee?: null,
      caller?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          callDataHash: string;
          transactionId: string;
        },
        string,
        BigNumber,
        string
      ],
      {
        invariantData: [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          callDataHash: string;
          transactionId: string;
        };
        routerRelayerFeeAsset: string;
        routerRelayerFee: BigNumber;
        caller: string;
      }
    >;

    Prepare(
      invariantData?: null,
      routerRelayerFeeAsset?: null,
      routerRelayerFee?: null,
      caller?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          callDataHash: string;
          transactionId: string;
        },
        string,
        BigNumber,
        string
      ],
      {
        invariantData: [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          callDataHash: string;
          transactionId: string;
        };
        routerRelayerFeeAsset: string;
        routerRelayerFee: BigNumber;
        caller: string;
      }
    >;

    "RelayerFeeAdded(address,uint256,address)"(
      assetId?: null,
      amount?: null,
      caller?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { assetId: string; amount: BigNumber; caller: string }
    >;

    RelayerFeeAdded(
      assetId?: null,
      amount?: null,
      caller?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { assetId: string; amount: BigNumber; caller: string }
    >;

    "RelayerFeeRemoved(address,uint256,address)"(
      assetId?: null,
      amount?: null,
      caller?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { assetId: string; amount: BigNumber; caller: string }
    >;

    RelayerFeeRemoved(
      assetId?: null,
      amount?: null,
      caller?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { assetId: string; amount: BigNumber; caller: string }
    >;

    "RemoveLiquidity(uint256,address,address,uint256,address)"(
      amount?: null,
      assetId?: null,
      routerRelayerFeeAsset?: null,
      routerRelayerFee?: null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, string],
      {
        amount: BigNumber;
        assetId: string;
        routerRelayerFeeAsset: string;
        routerRelayerFee: BigNumber;
        caller: string;
      }
    >;

    RemoveLiquidity(
      amount?: null,
      assetId?: null,
      routerRelayerFeeAsset?: null,
      routerRelayerFee?: null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, string],
      {
        amount: BigNumber;
        assetId: string;
        routerRelayerFeeAsset: string;
        routerRelayerFee: BigNumber;
        caller: string;
      }
    >;
  };

  estimateGas: {
    addRelayerFee(
      amount: BigNumberish,
      assetId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        signature: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfill(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        relayerFee: BigNumberish;
        signature: BytesLike;
        callData: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _transactionManager: string,
      _chainId: BigNumberish,
      _routerSigner: string,
      _recipient: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prepare(
      args: {
        invariantData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          callDataHash: BytesLike;
          transactionId: BytesLike;
        };
        amount: BigNumberish;
        expiry: BigNumberish;
        encryptedCallData: BytesLike;
        encodedBid: BytesLike;
        bidSignature: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recipient(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRelayerFee(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    routerFactory(overrides?: CallOverrides): Promise<BigNumber>;

    routerSigner(overrides?: CallOverrides): Promise<BigNumber>;

    setRecipient(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSigner(
      _routerSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transactionManager(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRelayerFee(
      amount: BigNumberish,
      assetId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        signature: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfill(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        relayerFee: BigNumberish;
        signature: BytesLike;
        callData: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _transactionManager: string,
      _chainId: BigNumberish,
      _routerSigner: string,
      _recipient: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepare(
      args: {
        invariantData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          callDataHash: BytesLike;
          transactionId: BytesLike;
        };
        amount: BigNumberish;
        expiry: BigNumberish;
        encryptedCallData: BytesLike;
        encodedBid: BytesLike;
        bidSignature: BytesLike;
        encodedMeta: BytesLike;
      },
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      routerRelayerFeeAsset: string,
      routerRelayerFee: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayerFee(
      amount: BigNumberish,
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    routerFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    routerSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRecipient(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _routerSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transactionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
