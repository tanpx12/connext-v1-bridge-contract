/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "ConnextPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConnextPriceOracle__factory>;
    getContractFactory(
      name: "IERC20Extended",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Extended__factory>;
    getContractFactory(
      name: "IERC20Minimal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Minimal__factory>;
    getContractFactory(
      name: "IFulfillInterpreter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFulfillInterpreter__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "IRouterFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouterFactory__factory>;
    getContractFactory(
      name: "ITransactionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransactionManager__factory>;
    getContractFactory(
      name: "FulfillInterpreter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FulfillInterpreter__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracle__factory>;
    getContractFactory(
      name: "ProposedOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProposedOwnable__factory>;
    getContractFactory(
      name: "Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: "RouterFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RouterFactory__factory>;
    getContractFactory(
      name: "Counter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Counter__factory>;
    getContractFactory(
      name: "FeeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeERC20__factory>;
    getContractFactory(
      name: "LibAssetTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibAssetTest__factory>;
    getContractFactory(
      name: "RevertableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertableERC20__factory>;
    getContractFactory(
      name: "TestAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestAggregator__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TransactionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransactionManager__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "ConnextPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConnextPriceOracle>;
    getContractAt(
      name: "IERC20Extended",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Extended>;
    getContractAt(
      name: "IERC20Minimal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Minimal>;
    getContractAt(
      name: "IFulfillInterpreter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFulfillInterpreter>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "IRouterFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouterFactory>;
    getContractAt(
      name: "ITransactionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransactionManager>;
    getContractAt(
      name: "FulfillInterpreter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FulfillInterpreter>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "PriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracle>;
    getContractAt(
      name: "ProposedOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProposedOwnable>;
    getContractAt(
      name: "Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Router>;
    getContractAt(
      name: "RouterFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RouterFactory>;
    getContractAt(
      name: "Counter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Counter>;
    getContractAt(
      name: "FeeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeERC20>;
    getContractAt(
      name: "LibAssetTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibAssetTest>;
    getContractAt(
      name: "RevertableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertableERC20>;
    getContractAt(
      name: "TestAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestAggregator>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TransactionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransactionManager>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
