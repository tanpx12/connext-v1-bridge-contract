{
  "address": "0x73a37b3EB030cC3f9739CA5C16b7E6802F294122",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "routerSigner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "transactionManager",
          "type": "address"
        }
      ],
      "name": "RouterCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "routerSigner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "createRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "routerSigner",
          "type": "address"
        }
      ],
      "name": "getRouterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transactionManager",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routerAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionManager",
      "outputs": [
        {
          "internalType": "contract ITransactionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6da9641ea538d94896641cd0bf5ab605ac1fda6f6b91d7397c742c2b9a39e4d",
  "receipt": {
    "to": null,
    "from": "0xFD8c6Ebe0D284f9D2C9665f17BbA47032259E907",
    "contractAddress": "0x73a37b3EB030cC3f9739CA5C16b7E6802F294122",
    "transactionIndex": 0,
    "gasUsed": "2854204",
    "logsBloom": "0x
    "blockHash": "0x1936c8912382ff6635ddf031d7ec9e7e5419b39a0dff79f6b739b3340e0ecc5c",
    "transactionHash": "0xa6da9641ea538d94896641cd0bf5ab605ac1fda6f6b91d7397c742c2b9a39e4d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1377425,
        "transactionHash": "0xa6da9641ea538d94896641cd0bf5ab605ac1fda6f6b91d7397c742c2b9a39e4d",
        "address": "0x73a37b3EB030cC3f9739CA5C16b7E6802F294122",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fd8c6ebe0d284f9d2c9665f17bba47032259e907"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1936c8912382ff6635ddf031d7ec9e7e5419b39a0dff79f6b739b3340e0ecc5c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1377425,
        "transactionHash": "0xa6da9641ea538d94896641cd0bf5ab605ac1fda6f6b91d7397c742c2b9a39e4d",
        "address": "0x73a37b3EB030cC3f9739CA5C16b7E6802F294122",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000fd8c6ebe0d284f9d2c9665f17bba47032259e907",
          "0x000000000000000000000000fd8c6ebe0d284f9d2c9665f17bba47032259e907"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x1936c8912382ff6635ddf031d7ec9e7e5419b39a0dff79f6b739b3340e0ecc5c"
      }
    ],
    "blockNumber": 1377425,
    "cumulativeGasUsed": "2854204",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD8c6Ebe0D284f9D2C9665f17BbA47032259E907"
  ],
  "solcInputHash": "47e5bc2081b3c8db7749ab44c5ca0b09",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"routerSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transactionManager\",\"type\":\"address\"}],\"name\":\"RouterCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerSigner\",\"type\":\"address\"}],\"name\":\"getRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transactionManager\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionManager\",\"outputs\":[{\"internalType\":\"contract ITransactionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createRouter(address,address)\":{\"params\":{\"recipient\":\"address recipient\",\"routerSigner\":\"address router signer\"}},\"getRouterAddress(address)\":{\"params\":{\"routerSigner\":\"address router signer\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"chainId\":{\"details\":\"The stored chain id of the contract, may be passed in to avoid any      evm issues\"},\"routerAddresses\":{\"details\":\"Mapping of routerSigner to created Router contract address\"},\"transactionManager\":{\"details\":\"The transaction Manager contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createRouter(address,address)\":{\"notice\":\"Allows us to create new router contract\"},\"getRouterAddress(address)\":{\"notice\":\"Allows us to get the address for a new router contract created via `createRouter`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RouterFactory.sol\":\"RouterFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x27f9465d84949f059ed37b23c82f4a9fc16c1b8d6fbd69837a0f920875e2af83\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/ITransactionManager.sol\\\";\\nimport \\\"./lib/LibAsset.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract Router is Ownable {\\n  address public immutable routerFactory;\\n\\n  ITransactionManager public transactionManager;\\n\\n  uint256 private chainId;\\n\\n  address public recipient;\\n\\n  address public routerSigner;\\n\\n  struct SignedPrepareData {\\n    ITransactionManager.PrepareArgs args;\\n    address routerRelayerFeeAsset;\\n    uint256 routerRelayerFee;\\n    uint256 chainId; // For domain separation\\n  }\\n\\n  struct SignedFulfillData {\\n    ITransactionManager.FulfillArgs args;\\n    address routerRelayerFeeAsset;\\n    uint256 routerRelayerFee;\\n    uint256 chainId; // For domain separation\\n  }\\n\\n  struct SignedCancelData {\\n    ITransactionManager.CancelArgs args;\\n    address routerRelayerFeeAsset;\\n    uint256 routerRelayerFee;\\n    uint256 chainId; // For domain separation\\n  }\\n\\n  struct SignedRemoveLiquidityData {\\n    uint256 amount;\\n    address assetId;\\n    address routerRelayerFeeAsset;\\n    uint256 routerRelayerFee;\\n    uint256 chainId; // For domain separation\\n  }\\n\\n  event RelayerFeeAdded(address assetId, uint256 amount, address caller);\\n  event RelayerFeeRemoved(address assetId, uint256 amount, address caller);\\n  event RemoveLiquidity(\\n    uint256 amount, \\n    address assetId,\\n    address routerRelayerFeeAsset,\\n    uint256 routerRelayerFee, \\n    address caller\\n  );\\n  event Prepare(\\n    ITransactionManager.InvariantTransactionData invariantData,\\n    address routerRelayerFeeAsset,\\n    uint256 routerRelayerFee,\\n    address caller\\n  );\\n  event Fulfill(\\n    ITransactionManager.TransactionData txData,\\n    address routerRelayerFeeAsset,\\n    uint256 routerRelayerFee,\\n    address caller\\n  );\\n  event Cancel(\\n    ITransactionManager.TransactionData txData,\\n    address routerRelayerFeeAsset,\\n    uint256 routerRelayerFee,\\n    address caller\\n  );\\n\\n  constructor(address _routerFactory) {\\n    routerFactory = _routerFactory;\\n  }\\n\\n  // Prevents from calling methods other than routerFactory contract\\n  modifier onlyViaFactory() {\\n    require(msg.sender == routerFactory, \\\"ONLY_VIA_FACTORY\\\");\\n    _;\\n  }\\n\\n  function init(\\n    address _transactionManager,\\n    uint256 _chainId,\\n    address _routerSigner,\\n    address _recipient,\\n    address _owner\\n  ) external onlyViaFactory {\\n    transactionManager = ITransactionManager(_transactionManager);\\n    chainId = _chainId;\\n    routerSigner = _routerSigner;\\n    recipient = _recipient;\\n    transferOwnership(_owner);\\n  }\\n\\n  function setRecipient(address _recipient) external onlyOwner {\\n    recipient = _recipient;\\n  }\\n\\n  function setSigner(address _routerSigner) external onlyOwner {\\n    routerSigner = _routerSigner;\\n  }\\n\\n  function addRelayerFee(uint256 amount, address assetId) external payable {\\n    // Sanity check: nonzero amounts\\n    require(amount > 0, \\\"#RC_ARF:002\\\");\\n\\n    // Transfer funds to contract\\n    // Validate correct amounts are transferred\\n    if (LibAsset.isNativeAsset(assetId)) {\\n      require(msg.value == amount, \\\"#RC_ARF:005\\\");\\n    } else {\\n      require(msg.value == 0, \\\"#RC_ARF:006\\\");\\n      LibAsset.transferFromERC20(assetId, msg.sender, address(this), amount);\\n    }\\n\\n    // Emit event\\n    emit RelayerFeeAdded(assetId, amount, msg.sender);\\n  }\\n\\n  function removeRelayerFee(uint256 amount, address assetId) external onlyOwner {\\n    // Sanity check: nonzero amounts\\n    require(amount > 0, \\\"#RC_RRF:002\\\");\\n\\n    // Transfer funds from contract\\n    LibAsset.transferAsset(assetId, payable(recipient), amount);\\n\\n    // Emit event\\n    emit RelayerFeeRemoved(assetId, amount, msg.sender);\\n  }\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    address assetId,\\n    address routerRelayerFeeAsset,\\n    uint256 routerRelayerFee,\\n    bytes calldata signature\\n  ) external {\\n    if (msg.sender != routerSigner) {\\n      SignedRemoveLiquidityData memory payload = SignedRemoveLiquidityData({\\n        amount: amount,\\n        assetId: assetId,\\n        routerRelayerFeeAsset: routerRelayerFeeAsset,\\n        routerRelayerFee: routerRelayerFee,\\n        chainId: chainId\\n      });\\n\\n      address recovered = recoverSignature(abi.encode(payload), signature);\\n      require(recovered == routerSigner, \\\"#RC_RL:040\\\");\\n\\n      // Send the relayer the fee\\n      if (routerRelayerFee > 0) {\\n        LibAsset.transferAsset(routerRelayerFeeAsset, payable(msg.sender), routerRelayerFee);\\n      }\\n    }\\n\\n    emit RemoveLiquidity(amount, assetId, routerRelayerFeeAsset, routerRelayerFee, msg.sender);\\n    return transactionManager.removeLiquidity(amount, assetId, payable(recipient));\\n  }\\n\\n  function prepare(\\n    ITransactionManager.PrepareArgs calldata args,\\n    address routerRelayerFeeAsset,\\n    uint256 routerRelayerFee,\\n    bytes calldata signature\\n  ) external payable returns (ITransactionManager.TransactionData memory) {\\n    if (msg.sender != routerSigner) {\\n      SignedPrepareData memory payload = SignedPrepareData({\\n        args: args,\\n        routerRelayerFeeAsset: routerRelayerFeeAsset,\\n        routerRelayerFee: routerRelayerFee,\\n        chainId: chainId\\n      });\\n\\n      address recovered = recoverSignature(abi.encode(payload), signature);\\n      require(recovered == routerSigner, \\\"#RC_P:040\\\");\\n\\n      // Send the relayer the fee\\n      if (routerRelayerFee > 0) {\\n        LibAsset.transferAsset(routerRelayerFeeAsset, payable(msg.sender), routerRelayerFee);\\n      }\\n    }\\n\\n    emit Prepare(args.invariantData, routerRelayerFeeAsset, routerRelayerFee, msg.sender);\\n    return transactionManager.prepare(args);\\n  }\\n\\n  function fulfill(\\n    ITransactionManager.FulfillArgs calldata args,\\n    address routerRelayerFeeAsset,\\n    uint256 routerRelayerFee,\\n    bytes calldata signature\\n  ) external returns (ITransactionManager.TransactionData memory) {\\n    if (msg.sender != routerSigner) {\\n      SignedFulfillData memory payload = SignedFulfillData({\\n        args: args,\\n        routerRelayerFeeAsset: routerRelayerFeeAsset,\\n        routerRelayerFee: routerRelayerFee,\\n        chainId: chainId\\n      });\\n\\n      address recovered = recoverSignature(abi.encode(payload), signature);\\n      require(recovered == routerSigner, \\\"#RC_F:040\\\");\\n\\n      // Send the relayer the fee\\n      if (routerRelayerFee > 0) {\\n        LibAsset.transferAsset(routerRelayerFeeAsset, payable(msg.sender), routerRelayerFee);\\n      }\\n    }\\n    emit Fulfill(args.txData, routerRelayerFeeAsset, routerRelayerFee, msg.sender);\\n    return transactionManager.fulfill(args);\\n  }\\n\\n  function cancel(\\n    ITransactionManager.CancelArgs calldata args,\\n    address routerRelayerFeeAsset,\\n    uint256 routerRelayerFee,\\n    bytes calldata signature\\n  ) external returns (ITransactionManager.TransactionData memory) {\\n    if (msg.sender != routerSigner) {\\n      SignedCancelData memory payload = SignedCancelData({\\n        args: args,\\n        routerRelayerFeeAsset: routerRelayerFeeAsset,\\n        routerRelayerFee: routerRelayerFee,\\n        chainId: chainId\\n      });\\n\\n      address recovered = recoverSignature(abi.encode(payload), signature);\\n      require(recovered == routerSigner, \\\"#RC_C:040\\\");\\n\\n      // Send the relayer the fee\\n      if (routerRelayerFee > 0) {\\n        LibAsset.transferAsset(routerRelayerFeeAsset, payable(msg.sender), routerRelayerFee);\\n      }\\n    }\\n    emit Cancel(args.txData, routerRelayerFeeAsset, routerRelayerFee, msg.sender);\\n    return transactionManager.cancel(args);\\n  }\\n\\n  /**\\n   * @notice Holds the logic to recover the routerSigner from an encoded payload.\\n   *         Will hash and convert to an eth signed message.\\n   * @param encodedPayload The payload that was signed\\n   * @param signature The signature you are recovering the routerSigner from\\n   */\\n  function recoverSignature(bytes memory encodedPayload, bytes calldata signature) internal pure returns (address) {\\n    // Recover\\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(encodedPayload)), signature);\\n  }\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0x1c20d2dfdf0016b2a19e23a2fe88ba512a6c425774f3f5eb7a74614f844bfb65\",\"license\":\"UNLICENSED\"},\"contracts/RouterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"./interfaces/IRouterFactory.sol\\\";\\nimport \\\"./Router.sol\\\";\\n\\ncontract RouterFactory is IRouterFactory, Ownable {\\n  /**\\n   * @dev The stored chain id of the contract, may be passed in to avoid any\\n   *      evm issues\\n   */\\n  uint256 private chainId;\\n\\n  /**\\n   * @dev The transaction Manager contract\\n   */\\n  ITransactionManager public transactionManager;\\n\\n  /**\\n   * @dev Mapping of routerSigner to created Router contract address\\n   */\\n  mapping(address => address) public routerAddresses;\\n\\n  constructor(address _owner) {\\n    transferOwnership(_owner);\\n  }\\n\\n  function init(address _transactionManager) external onlyOwner {\\n    require(address(_transactionManager) != address(0), \\\"#RF_I:042\\\");\\n\\n    transactionManager = ITransactionManager(_transactionManager);\\n    chainId = ITransactionManager(_transactionManager).getChainId();\\n  }\\n\\n  /**\\n   * @notice Allows us to create new router contract\\n   * @param routerSigner address router signer\\n   * @param recipient address recipient\\n   */\\n\\n  function createRouter(address routerSigner, address recipient) external override returns (address) {\\n    require(address(transactionManager) != address(0), \\\"#RF_CR:042\\\");\\n\\n    require(routerSigner != address(0), \\\"#RF_CR:041\\\");\\n\\n    require(recipient != address(0), \\\"#RF_CR:007\\\");\\n\\n    address payable router = payable(Create2.deploy(0, generateSalt(routerSigner), getBytecode()));\\n    Router(router).init(address(transactionManager), chainId, routerSigner, recipient, msg.sender);\\n\\n    routerAddresses[routerSigner] = router;\\n    emit RouterCreated(router, routerSigner, recipient, address(transactionManager));\\n    return router;\\n  }\\n\\n  /**\\n   * @notice Allows us to get the address for a new router contract created via `createRouter`\\n   * @param routerSigner address router signer\\n   */\\n  function getRouterAddress(address routerSigner) external view override returns (address) {\\n    return Create2.computeAddress(generateSalt(routerSigner), keccak256(getBytecode()));\\n  }\\n\\n  ////////////////////////////////////////\\n  // Internal Methods\\n\\n  function getBytecode() internal view returns (bytes memory) {\\n    bytes memory bytecode = type(Router).creationCode;\\n    return abi.encodePacked(bytecode, abi.encode(address(this)));\\n  }\\n\\n  function generateSalt(address routerSigner) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(routerSigner));\\n  }\\n}\\n\",\"keccak256\":\"0xa812a36cc655373d958da4421f5b7381a73709e217d2768ac729a9c3bc247c58\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRouterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\ninterface IRouterFactory {\\n  event RouterCreated(address router, address routerSigner, address recipient, address transactionManager);\\n\\n  function getRouterAddress(address routerSigner) external view returns (address);\\n\\n  function createRouter(address router, address recipient) external returns (address);\\n}\\n\",\"keccak256\":\"0x470003f81e4f35727e0bbc2be936622d7fd38d66bc47b20760032d0d9318c2a7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\ninterface ITransactionManager {\\n  // Structs\\n\\n  // Holds all data that is constant between sending and\\n  // receiving chains. The hash of this is what gets signed\\n  // to ensure the signature can be used on both chains.\\n  struct InvariantTransactionData {\\n    address receivingChainTxManagerAddress;\\n    address user;\\n    address router;\\n    address initiator; // msg.sender of sending side\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    address sendingChainFallback; // funds sent here on cancel\\n    address receivingAddress;\\n    address callTo;\\n    uint256 sendingChainId;\\n    uint256 receivingChainId;\\n    bytes32 callDataHash; // hashed to prevent free option\\n    bytes32 transactionId;\\n  }\\n\\n  // Holds all data that varies between sending and receiving\\n  // chains. The hash of this is stored onchain to ensure the\\n  // information passed in is valid.\\n  struct VariantTransactionData {\\n    uint256 amount;\\n    uint256 expiry;\\n    uint256 preparedBlockNumber;\\n  }\\n\\n  // All Transaction data, constant and variable\\n  struct TransactionData {\\n    address receivingChainTxManagerAddress;\\n    address user;\\n    address router;\\n    address initiator; // msg.sender of sending side\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    address sendingChainFallback;\\n    address receivingAddress;\\n    address callTo;\\n    bytes32 callDataHash;\\n    bytes32 transactionId;\\n    uint256 sendingChainId;\\n    uint256 receivingChainId;\\n    uint256 amount;\\n    uint256 expiry;\\n    uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\\n  }\\n\\n  // The structure of the signed data for fulfill\\n  struct SignedFulfillData {\\n    bytes32 transactionId;\\n    uint256 relayerFee;\\n    string functionIdentifier; // \\\"fulfill\\\" or \\\"cancel\\\"\\n    uint256 receivingChainId; // For domain separation\\n    address receivingChainTxManagerAddress; // For domain separation\\n  }\\n\\n  // The structure of the signed data for cancellation\\n  struct SignedCancelData {\\n    bytes32 transactionId;\\n    string functionIdentifier;\\n    uint256 receivingChainId;\\n    address receivingChainTxManagerAddress; // For domain separation\\n  }\\n\\n  /**\\n    * Arguments for calling prepare()\\n    * @param invariantData The data for a crosschain transaction that will\\n    *                      not change between sending and receiving chains.\\n    *                      The hash of this data is used as the key to store \\n    *                      the inforamtion that does change between chains \\n    *                      (amount,expiry,preparedBlock) for verification\\n    * @param amount The amount of the transaction on this chain\\n    * @param expiry The block.timestamp when the transaction will no longer be\\n    *               fulfillable and is freely cancellable on this chain\\n    * @param encryptedCallData The calldata to be executed when the tx is\\n    *                          fulfilled. Used in the function to allow the user\\n    *                          to reconstruct the tx from events. Hash is stored\\n    *                          onchain to prevent shenanigans.\\n    * @param encodedBid The encoded bid that was accepted by the user for this\\n    *                   crosschain transfer. It is supplied as a param to the\\n    *                   function but is only used in event emission\\n    * @param bidSignature The signature of the bidder on the encoded bid for\\n    *                     this transaction. Only used within the function for\\n    *                     event emission. The validity of the bid and\\n    *                     bidSignature are enforced offchain\\n    * @param encodedMeta The meta for the function\\n    */\\n  struct PrepareArgs {\\n    InvariantTransactionData invariantData;\\n    uint256 amount;\\n    uint256 expiry;\\n    bytes encryptedCallData;\\n    bytes encodedBid;\\n    bytes bidSignature;\\n    bytes encodedMeta;\\n  }\\n\\n  /**\\n    * @param txData All of the data (invariant and variant) for a crosschain\\n    *               transaction. The variant data provided is checked against\\n    *               what was stored when the `prepare` function was called.\\n    * @param relayerFee The fee that should go to the relayer when they are\\n    *                   calling the function on the receiving chain for the user\\n    * @param signature The users signature on the transaction id + fee that\\n    *                  can be used by the router to unlock the transaction on \\n    *                  the sending chain\\n    * @param callData The calldata to be sent to and executed by the \\n    *                 `FulfillHelper`\\n    * @param encodedMeta The meta for the function\\n    */\\n  struct FulfillArgs {\\n    TransactionData txData;\\n    uint256 relayerFee;\\n    bytes signature;\\n    bytes callData;\\n    bytes encodedMeta;\\n  }\\n\\n  /**\\n    * Arguments for calling cancel()\\n    * @param txData All of the data (invariant and variant) for a crosschain\\n    *               transaction. The variant data provided is checked against\\n    *               what was stored when the `prepare` function was called.\\n    * @param signature The user's signature that allows a transaction to be\\n    *                  cancelled by a relayer\\n    * @param encodedMeta The meta for the function\\n    */\\n  struct CancelArgs {\\n    TransactionData txData;\\n    bytes signature;\\n    bytes encodedMeta;\\n  }\\n\\n  // Adding/removing asset events\\n  event RouterAdded(address indexed addedRouter, address indexed caller);\\n\\n  event RouterRemoved(address indexed removedRouter, address indexed caller);\\n\\n  // Adding/removing router events\\n  event AssetAdded(address indexed addedAssetId, address indexed caller);\\n\\n  event AssetRemoved(address indexed removedAssetId, address indexed caller);\\n\\n  // Liquidity events\\n  event LiquidityAdded(address indexed router, address indexed assetId, uint256 amount, address caller);\\n\\n  event LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient);\\n\\n  // Transaction events\\n  event TransactionPrepared(\\n    address indexed user,\\n    address indexed router,\\n    bytes32 indexed transactionId,\\n    TransactionData txData,\\n    address caller,\\n    PrepareArgs args\\n  );\\n\\n  event TransactionFulfilled(\\n    address indexed user,\\n    address indexed router,\\n    bytes32 indexed transactionId,\\n    FulfillArgs args,\\n    bool success,\\n    bool isContract,\\n    bytes returnData,\\n    address caller\\n  );\\n\\n  event TransactionCancelled(\\n    address indexed user,\\n    address indexed router,\\n    bytes32 indexed transactionId,\\n    CancelArgs args,\\n    address caller\\n  );\\n\\n  // Getters\\n  function getChainId() external view returns (uint256);\\n\\n  function getStoredChainId() external view returns (uint256);\\n\\n  // Owner only methods\\n  function addRouter(address router) external;\\n\\n  function removeRouter(address router) external;\\n\\n  function addAssetId(address assetId) external;\\n\\n  function removeAssetId(address assetId) external;\\n\\n  // Router only methods\\n  function addLiquidityFor(uint256 amount, address assetId, address router) external payable;\\n\\n  function addLiquidity(uint256 amount, address assetId) external payable;\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    address assetId,\\n    address payable recipient\\n  ) external;\\n\\n  // Methods for crosschain transfers\\n  // called in the following order (in happy case)\\n  // 1. prepare by user on sending chain\\n  // 2. prepare by router on receiving chain\\n  // 3. fulfill by user on receiving chain\\n  // 4. fulfill by router on sending chain\\n  function prepare(\\n    PrepareArgs calldata args\\n  ) external payable returns (TransactionData memory);\\n\\n  function fulfill(\\n    FulfillArgs calldata args\\n  ) external returns (TransactionData memory);\\n\\n  function cancel(CancelArgs calldata args) external returns (TransactionData memory);\\n}\\n\",\"keccak256\":\"0x3dcce1c0f5fd1206cc6c56dfe62bcd922c3aaf165dbb424affe2f029064a04f2\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n* @title LibAsset\\n* @author Connext <support@connext.network>\\n* @notice This library contains helpers for dealing with onchain transfers\\n*         of assets, including accounting for the native asset `assetId`\\n*         conventions and any noncompliant ERC20 transfers\\n*/\\nlibrary LibAsset {\\n  /** \\n  * @dev All native assets use the empty address for their asset id\\n  *      by convention\\n  */\\n  address constant NATIVE_ASSETID = address(0);\\n\\n  /** \\n  * @notice Determines whether the given assetId is the native asset\\n  * @param assetId The asset identifier to evaluate\\n  * @return Boolean indicating if the asset is the native asset\\n  */\\n  function isNativeAsset(address assetId) internal pure returns (bool) {\\n    return assetId == NATIVE_ASSETID;\\n  }\\n\\n  /** \\n  * @notice Gets the balance of the inheriting contract for the given asset\\n  * @param assetId The asset identifier to get the balance of\\n  * @return Balance held by contracts using this library\\n  */\\n  function getOwnBalance(address assetId) internal view returns (uint256) {\\n    return\\n      isNativeAsset(assetId)\\n        ? address(this).balance\\n        : IERC20(assetId).balanceOf(address(this));\\n  }\\n\\n  /** \\n  * @notice Transfers ether from the inheriting contract to a given\\n  *         recipient\\n  * @param recipient Address to send ether to\\n  * @param amount Amount to send to given recipient\\n  */\\n  function transferNativeAsset(address payable recipient, uint256 amount)\\n      internal\\n  {\\n    Address.sendValue(recipient, amount);\\n  }\\n\\n  /** \\n  * @notice Transfers tokens from the inheriting contract to a given\\n  *         recipient\\n  * @param assetId Token address to transfer\\n  * @param recipient Address to send ether to\\n  * @param amount Amount to send to given recipient\\n  */\\n  function transferERC20(\\n      address assetId,\\n      address recipient,\\n      uint256 amount\\n  ) internal {\\n    SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\n  }\\n\\n  /** \\n  * @notice Transfers tokens from a sender to a given recipient\\n  * @param assetId Token address to transfer\\n  * @param from Address of sender/owner\\n  * @param to Address of recipient/spender\\n  * @param amount Amount to transfer from owner to spender\\n  */\\n  function transferFromERC20(\\n    address assetId,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);\\n  }\\n\\n  /** \\n  * @notice Increases the allowance of a token to a spender\\n  * @param assetId Token address of asset to increase allowance of\\n  * @param spender Account whos allowance is increased\\n  * @param amount Amount to increase allowance by\\n  */\\n  function increaseERC20Allowance(\\n    address assetId,\\n    address spender,\\n    uint256 amount\\n  ) internal {\\n    require(!isNativeAsset(assetId), \\\"#IA:034\\\");\\n    SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\\n  }\\n\\n  /**\\n  * @notice Decreases the allowance of a token to a spender\\n  * @param assetId Token address of asset to decrease allowance of\\n  * @param spender Account whos allowance is decreased\\n  * @param amount Amount to decrease allowance by\\n  */\\n  function decreaseERC20Allowance(\\n    address assetId,\\n    address spender,\\n    uint256 amount\\n  ) internal {\\n    require(!isNativeAsset(assetId), \\\"#DA:034\\\");\\n    SafeERC20.safeDecreaseAllowance(IERC20(assetId), spender, amount);\\n  }\\n\\n  /**\\n  * @notice Wrapper function to transfer a given asset (native or erc20) to\\n  *         some recipient. Should handle all non-compliant return value\\n  *         tokens as well by using the SafeERC20 contract by open zeppelin.\\n  * @param assetId Asset id for transfer (address(0) for native asset, \\n  *                token address for erc20s)\\n  * @param recipient Address to send asset to\\n  * @param amount Amount to send to given recipient\\n  */\\n  function transferAsset(\\n      address assetId,\\n      address payable recipient,\\n      uint256 amount\\n  ) internal {\\n    isNativeAsset(assetId)\\n      ? transferNativeAsset(recipient, amount)\\n      : transferERC20(assetId, recipient, amount);\\n  }\\n}\",\"keccak256\":\"0x6c450345fa4742df16176aba0ae74bbca4608cdd66880079ee5e04a6ea8e2951\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516133a43803806133a483398101604081905261002f91610167565b61003833610047565b61004181610097565b50610195565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146100f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03811661015b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100ed565b61016481610047565b50565b600060208284031215610178578081fd5b81516001600160a01b038116811461018e578182fd5b9392505050565b613200806101a46000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a61461010d5780637f629efc146101155780638da5cb5b14610128578063f2fde38b1461013957600080fd5b806319ab453c1461008d5780631f16a046146100a25780633b716452146100e7578063463a6176146100fa575b600080fd5b6100a061009b3660046107c6565b61014c565b005b6100cb6100b03660046107c6565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6002546100cb906001600160a01b031681565b6100cb6101083660046107c6565b610253565b6100a061027b565b6100cb6101233660046107e0565b6102b1565b6000546001600160a01b03166100cb565b6100a06101473660046107c6565b6104a2565b6000546001600160a01b0316331461017f5760405162461bcd60e51b815260040161017690610878565b60405180910390fd5b6001600160a01b0381166101c15760405162461bcd60e51b815260206004820152600960248201526811a9232fa49d181a1960b91b6044820152606401610176565b600280546001600160a01b0319166001600160a01b038316908117909155604080516303408e4760e41b81529051633408e47091600480820192602092909190829003018186803b15801561021557600080fd5b505afa158015610229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024d9190610812565b60015550565b60006102756102618361053d565b61026961057c565b805190602001206105e4565b92915050565b6000546001600160a01b031633146102a55760405162461bcd60e51b815260040161017690610878565b6102af6000610643565b565b6002546000906001600160a01b03166102f95760405162461bcd60e51b815260206004820152600a60248201526911a9232fa1a91d181a1960b11b6044820152606401610176565b6001600160a01b03831661033c5760405162461bcd60e51b815260206004820152600a6024820152692352465f43523a30343160b01b6044820152606401610176565b6001600160a01b03821661037f5760405162461bcd60e51b815260206004820152600a6024820152692352465f43523a30303760b01b6044820152606401610176565b600061039c600061038f8661053d565b61039761057c565b610693565b6002546001546040516344bd376560e01b81526001600160a01b0392831660048201526024810191909152868216604482015285821660648201523360848201529192508216906344bd37659060a401600060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602090815260409182902080548686166001600160a01b0319909116811790915560025483519182529181019390935286841683830152909216606082015290517fe8e811674d167b407a67a22f592a226ade5e34b608e7d56721f82422f3b981979181900360800190a19392505050565b6000546001600160a01b031633146104cc5760405162461bcd60e51b815260040161017690610878565b6001600160a01b0381166105315760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610176565b61053a81610643565b50565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b60606000604051806020016105909061079d565b601f1982820381018352601f90910116604081815230602083015291925082910160408051601f19818403018152908290526105cf9291602001610863565b60405160208183030381529060405291505090565b604080516001600160f81b03196020808301919091526bffffffffffffffffffffffff193060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000905b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080844710156106e65760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606401610176565b82516107345760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401610176565b8383516020850187f590506001600160a01b0381166107955760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401610176565b949350505050565b61291d806108ae83390190565b80356001600160a01b03811681146107c157600080fd5b919050565b6000602082840312156107d7578081fd5b61063c826107aa565b600080604083850312156107f2578081fd5b6107fb836107aa565b9150610809602084016107aa565b90509250929050565b600060208284031215610823578081fd5b5051919050565b60008151815b8181101561084a5760208185018101518683015201610830565b818111156108585782828601525b509290920192915050565b6000610795610872838661082a565b8461082a565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe60a06040523480156200001157600080fd5b506040516200291d3803806200291d8339810160408190526200003491620000a5565b6200003f3362000055565b60601b6001600160601b031916608052620000d5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000b7578081fd5b81516001600160a01b0381168114620000ce578182fd5b9392505050565b60805160601c612822620000fb600039600081816101b4015261037c01526128226000f3fe6080604052600436106100f75760003560e01c80636e2054a91161008a578063ce97653911610059578063ce976539146102b6578063d42030ed146102c9578063f2fde38b146102e9578063fc6bee131461030957600080fd5b80636e2054a914610236578063715018a61461026357806382977466146102785780638da5cb5b1461029857600080fd5b80634ba51437116100c65780634ba51437146101a25780634f64cfc5146101d657806366d003ac146101f65780636c19e7831461021657600080fd5b80633411dbdc146101035780633b716452146101405780633bbed4a01461016057806344bd37651461018257600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b50600454610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014c57600080fd5b50600154610123906001600160a01b031681565b34801561016c57600080fd5b5061018061017b3660046117e5565b61031c565b005b34801561018e57600080fd5b5061018061019d366004611801565b610371565b3480156101ae57600080fd5b506101237f000000000000000000000000000000000000000000000000000000000000000081565b3480156101e257600080fd5b506101806101f1366004611a9b565b61042e565b34801561020257600080fd5b50600354610123906001600160a01b031681565b34801561022257600080fd5b506101806102313660046117e5565b6104ff565b34801561024257600080fd5b50610256610251366004611915565b61054b565b604051610137919061248f565b34801561026f57600080fd5b506101806106f5565b34801561028457600080fd5b50610180610293366004611aca565b61072b565b3480156102a457600080fd5b506000546001600160a01b0316610123565b6102566102c4366004611956565b610918565b3480156102d557600080fd5b506102566102e4366004611888565b610a4f565b3480156102f557600080fd5b506101806103043660046117e5565b610b86565b610180610317366004611a9b565b610c21565b6000546001600160a01b0316331461034f5760405162461bcd60e51b815260040161034690612042565b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103dc5760405162461bcd60e51b815260206004820152601060248201526f4f4e4c595f5649415f464143544f525960801b6044820152606401610346565b600180546001600160a01b038088166001600160a01b031992831617909255600286905560048054868416908316179055600380549285169290911691909117905561042781610b86565b5050505050565b6000546001600160a01b031633146104585760405162461bcd60e51b815260040161034690612042565b600082116104965760405162461bcd60e51b815260206004820152600b60248201526a11a921afa929231d18181960a91b6044820152606401610346565b6003546104ae9082906001600160a01b031684610d40565b604080516001600160a01b03831681526020810184905233918101919091527f5d760a2d1cc0892ddaea1748093916f51d345b37724db0f69b41574a92adc06f906060015b60405180910390a15050565b6000546001600160a01b031633146105295760405162461bcd60e51b815260040161034690612042565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610553611491565b6004546001600160a01b0316331461062a57600060405180608001604052808861057c90612609565b8152602001876001600160a01b03168152602001868152602001600254815250905060006105ca826040516020016105b491906122e7565b6040516020818303038152906040528686610d69565b6004549091506001600160a01b038083169116146106165760405162461bcd60e51b815260206004820152600960248201526802352435f463a3034360bc1b6044820152606401610346565b851561062757610627873388610d40565b50505b6040517fbd58fe74fd3111b8d37f5a35a025b9cec45d1f01f329eb4e1b86a1428d5d333790610660908890889088903390612455565b60405180910390a16001546040516301362a3560e71b81526001600160a01b0390911690639b151a80906106989089906004016120da565b61020060405180830381600087803b1580156106b357600080fd5b505af11580156106c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106eb9190611997565b9695505050505050565b6000546001600160a01b0316331461071f5760405162461bcd60e51b815260040161034690612042565b6107296000610e12565b565b6004546001600160a01b0316331461084a5760006040518060a00160405280888152602001876001600160a01b03168152602001866001600160a01b03168152602001858152602001600254815250905060006107e9826040516020016107d39190815181526020808301516001600160a01b039081169183019190915260408084015190911690820152606080830151908201526080918201519181019190915260a00190565b6040516020818303038152906040528585610d69565b6004549091506001600160a01b038083169116146108365760405162461bcd60e51b815260206004820152600a60248201526902352435f524c3a3034360b41b6044820152606401610346565b841561084757610847863387610d40565b50505b604080518781526001600160a01b0387811660208301528616818301526060810185905233608082015290517f964a82560b2c071ffde7bc11cc169cfbef31770b4457ff7fa561d5e2bfb515439181900360a00190a1600154600354604051633cc6af3160e21b8152600481018990526001600160a01b038881166024830152918216604482015291169063f31abcc490606401600060405180830381600087803b1580156108f857600080fd5b505af115801561090c573d6000803e3d6000fd5b50505050505050505050565b610920611491565b6004546001600160a01b031633146109e1576000604051806080016040528088610949906126b7565b8152602001876001600160a01b0316815260200186815260200160025481525090506000610981826040516020016105b491906123a6565b6004549091506001600160a01b038083169116146109cd5760405162461bcd60e51b815260206004820152600960248201526802352435f503a3034360bc1b6044820152606401610346565b85156109de576109de873388610d40565b50505b6040517f583ad731037599752e477b0d462b10b6067dab73e63227960e20403a8ee7f7f090610a17908890889088903390612176565b60405180910390a1600154604051636ca2c9b960e11b81526001600160a01b039091169063d9459372906106989089906004016121b0565b610a57611491565b6004546001600160a01b03163314610b18576000604051806080016040528088610a8090612572565b8152602001876001600160a01b0316815260200186815260200160025481525090506000610ab8826040516020016105b4919061225b565b6004549091506001600160a01b03808316911614610b045760405162461bcd60e51b815260206004820152600960248201526802352435f433a3034360bc1b6044820152606401610346565b8515610b1557610b15873388610d40565b50505b6040517fdb26fb99c342114246dbc5580bb4d02519f9250cacf10aafc127b24f755d4e3f90610b4e908890889088903390612455565b60405180910390a1600154604051635f48d15d60e11b81526001600160a01b039091169063be91a2ba90610698908990600401612077565b6000546001600160a01b03163314610bb05760405162461bcd60e51b815260040161034690612042565b6001600160a01b038116610c155760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610346565b610c1e81610e12565b50565b60008211610c5f5760405162461bcd60e51b815260206004820152600b60248201526a11a921afa0a9231d18181960a91b6044820152606401610346565b6001600160a01b038116610caf57813414610caa5760405162461bcd60e51b815260206004820152600b60248201526a2352435f4152463a30303560a81b6044820152606401610346565b610cf7565b3415610ceb5760405162461bcd60e51b815260206004820152600b60248201526a11a921afa0a9231d18181b60a91b6044820152606401610346565b610cf781333085610e62565b604080516001600160a01b03831681526020810184905233918101919091527f1104e763408245681528382e9b9fcd4d8f1b4bce2e83f5ce2be8d1a5ec8323a0906060016104f3565b6001600160a01b03831615610d5f57610d5a838383610e74565b505050565b610d5a8282610e7f565b6000610e08610dcc85805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8d92505050565b90505b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610e6e84848484610f37565b50505050565b610d5a838383610fa2565b610e898282610fd2565b5050565b6000815160411415610ec15760208201516040830151606084015160001a610eb7868285856110eb565b9350505050610f31565b815160401415610ee95760208201516040830151610ee0858383611294565b92505050610f31565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610346565b92915050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e6e9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526112b4565b6040516001600160a01b038316602482015260448101829052610d5a90849063a9059cbb60e01b90606401610f6b565b804710156110225760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610346565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461106f576040519150601f19603f3d011682016040523d82523d6000602084013e611074565b606091505b5050905080610d5a5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610346565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156111685760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610346565b8360ff16601b148061117d57508360ff16601c145b6111d45760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610346565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611228573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661128b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610346565b95945050505050565b60006001600160ff1b03821660ff83901c601b016106eb868287856110eb565b6000611309826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113869092919063ffffffff16565b805190915015610d5a57808060200190518101906113279190611868565b610d5a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610346565b6060610e08848460008585843b6113df5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610346565b600080866001600160a01b031685876040516113fb9190612013565b60006040518083038185875af1925050503d8060008114611438576040519150601f19603f3d011682016040523d82523d6000602084013e61143d565b606091505b509150915061144d828286611458565b979650505050505050565b60608315611467575081610e0b565b8251156114775782518084602001fd5b8160405162461bcd60e51b8152600401610346919061202f565b6040805161020081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e081019190915290565b8035611520816127d7565b919050565b8051611520816127d7565b60008083601f840112611541578182fd5b5081356001600160401b03811115611557578182fd5b60208301915083602082850101111561156f57600080fd5b9250929050565b600082601f830112611586578081fd5b81356001600160401b03808211156115a0576115a06127c1565b604051601f8301601f19908116603f011681019082821181831017156115c8576115c86127c1565b816040528381528660208588010111156115e0578485fd5b8360208701602083013792830160200193909352509392505050565b60006101a0828403121561160e578081fd5b61161661249e565b905061162182611515565b815261162f60208301611515565b602082015261164060408301611515565b604082015261165160608301611515565b606082015261166260808301611515565b608082015261167360a08301611515565b60a082015261168460c08301611515565b60c082015261169560e08301611515565b60e08201526101006116a8818401611515565b908201526101208281013590820152610140808301359082015261016080830135908201526101809182013591810191909152919050565b600061020082840312156116f2578081fd5b6116fa6124c7565b905061170582611515565b815261171360208301611515565b602082015261172460408301611515565b604082015261173560608301611515565b606082015261174660808301611515565b608082015261175760a08301611515565b60a082015261176860c08301611515565b60c082015261177960e08301611515565b60e082015261010061178c818401611515565b9082015261012082810135908201526101408083013590820152610160808301359082015261018080830135908201526101a080830135908201526101c080830135908201526101e09182013591810191909152919050565b6000602082840312156117f6578081fd5b8135610e0b816127d7565b600080600080600060a08688031215611818578081fd5b8535611823816127d7565b945060208601359350604086013561183a816127d7565b9250606086013561184a816127d7565b9150608086013561185a816127d7565b809150509295509295909350565b600060208284031215611879578081fd5b81518015158114610e0b578182fd5b60008060008060006080868803121561189f578283fd5b85356001600160401b03808211156118b5578485fd5b90870190610240828a0312156118c9578485fd5b9095506020870135906118db826127d7565b90945060408701359350606087013590808211156118f7578283fd5b5061190488828901611530565b969995985093965092949392505050565b60008060008060006080868803121561192c578283fd5b85356001600160401b0380821115611942578485fd5b90870190610280828a0312156118c9578485fd5b60008060008060006080868803121561196d578283fd5b85356001600160401b0380821115611983578485fd5b90870190610260828a0312156118c9578485fd5b600061020082840312156119a9578081fd5b6119b16124c7565b6119ba83611525565b81526119c860208401611525565b60208201526119d960408401611525565b60408201526119ea60608401611525565b60608201526119fb60808401611525565b6080820152611a0c60a08401611525565b60a0820152611a1d60c08401611525565b60c0820152611a2e60e08401611525565b60e0820152610100611a41818501611525565b9082015261012083810151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0928301519281019290925250919050565b60008060408385031215611aad578182fd5b823591506020830135611abf816127d7565b809150509250929050565b60008060008060008060a08789031215611ae2578384fd5b863595506020870135611af4816127d7565b94506040870135611b04816127d7565b93506060870135925060808701356001600160401b03811115611b25578182fd5b611b3189828a01611530565b979a9699509497509295939492505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452611b84816020860160208601612795565b601f01601f19169290920160200192915050565b611bb282611ba583611515565b6001600160a01b03169052565b611bbe60208201611515565b6001600160a01b03166020830152611bd860408201611515565b6001600160a01b03166040830152611bf260608201611515565b6001600160a01b03166060830152611c0c60808201611515565b6001600160a01b03166080830152611c2660a08201611515565b6001600160a01b031660a0830152611c4060c08201611515565b6001600160a01b031660c0830152611c5a60e08201611515565b6001600160a01b031660e0830152610100611c76828201611515565b6001600160a01b03169083015261012081810135908301526101408082013590830152610160808201359083015261018090810135910152565b80516001600160a01b031682526020810151611cd760208401826001600160a01b03169052565b506040810151611cf260408401826001600160a01b03169052565b506060810151611d0d60608401826001600160a01b03169052565b506080810151611d2860808401826001600160a01b03169052565b5060a0810151611d4360a08401826001600160a01b03169052565b5060c0810151611d5e60c08401826001600160a01b03169052565b5060e0810151611d7960e08401826001600160a01b03169052565b50610100818101516001600160a01b03169083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b611dc882611ba583611515565b611dd460208201611515565b6001600160a01b03166020830152611dee60408201611515565b6001600160a01b03166040830152611e0860608201611515565b6001600160a01b03166060830152611e2260808201611515565b6001600160a01b03166080830152611e3c60a08201611515565b6001600160a01b031660a0830152611e5660c08201611515565b6001600160a01b031660c0830152611e7060e08201611515565b6001600160a01b031660e0830152610100611e8c828201611515565b6001600160a01b03169083015261012081810135908301526101408082013590830152610160808201359083015261018080820135908301526101a080820135908301526101c080820135908301526101e090810135910152565b80516001600160a01b031682526020810151611f0e60208401826001600160a01b03169052565b506040810151611f2960408401826001600160a01b03169052565b506060810151611f4460608401826001600160a01b03169052565b506080810151611f5f60808401826001600160a01b03169052565b5060a0810151611f7a60a08401826001600160a01b03169052565b5060c0810151611f9560c08401826001600160a01b03169052565b5060e0810151611fb060e08401826001600160a01b03169052565b50610100818101516001600160a01b03169083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e090810151910152565b60008251612025818460208701612795565b9190910192915050565b602081526000610e0b6020830184611b6c565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602081526120886020820183611dbb565b600061209861020084018461252e565b61024061022081818701526120b261026087018486611b43565b93506120c08188018861252e565b878603601f1901848901529350905061144d848483611b43565b602081526120eb6020820183611dbb565b6000610220610200840135818401526121068185018561252e565b915061028061024081818701526121226102a087018585611b43565b93506121308188018861252e565b93509050601f1961026081888703018189015261214e868685611b43565b955061215c818a018a61252e565b95509250508087860301838801525061144d848483611b43565b61020081016121858287611b98565b6001600160a01b039485166101a08301526101c082019390935292166101e090920191909152919050565b602081526121c16020820183611b98565b60006101c06101a0840135818401526101e081850135818501526121e78186018661252e565b92509050610260610200818187015261220561028087018585611b43565b93506122138188018861252e565b93509050601f19610220818887030181890152612231868685611b43565b955061223f818a018a61252e565b955092505061024081888703018189015261214e868685611b43565b60208152600082516080602084015261227860a084018251611ee7565b60208101516102406102a08501526122946102e0850182611b6c565b905060408201519150609f19848203016102c08501526122b48183611b6c565b91505060018060a01b03602085015116604084015260408401516060840152606084015160808401528091505092915050565b60208152600082516080602084015261230460a084018251611ee7565b60208101516102a084015260408101516102806102c085015261232b610320850182611b6c565b90506060820151609f1980868403016102e087015261234a8383611b6c565b9250608084015193508086840301610300870152505061236a8183611b6c565b915050602084015161238760408501826001600160a01b03169052565b5060408401516060840152606084015160808401528091505092915050565b6020815260008251608060208401526123c360a084018251611cb0565b6020810151610240840152604081015161026081818601526060830151915080610280860152506123f8610300850182611b6c565b90506080820151609f1980868403016102a08701526124178383611b6c565b925060a0840151915080868403016102c08701526124358383611b6c565b925060c0840151935080868403016102e0870152505061236a8183611b6c565b61026081016124648287611dbb565b6001600160a01b03948516610200830152610220820193909352921661024090920191909152919050565b6102008101610f318284611ee7565b6040516101a081016001600160401b03811182821017156124c1576124c16127c1565b60405290565b60405161020081016001600160401b03811182821017156124c1576124c16127c1565b60405160a081016001600160401b03811182821017156124c1576124c16127c1565b60405160e081016001600160401b03811182821017156124c1576124c16127c1565b6000808335601e19843603018112612544578283fd5b83016020810192503590506001600160401b0381111561256357600080fd5b80360383131561156f57600080fd5b60006102408236031215612584578081fd5b604051606081016001600160401b0382821081831117156125a7576125a76127c1565b816040526125b536866116e0565b83526102008501359150808211156125cb578384fd5b6125d736838701611576565b60208401526102208501359150808211156125f0578384fd5b506125fd36828601611576565b60408301525092915050565b6000610280823603121561261b578081fd5b6126236124ea565b61262d36846116e0565b815261020083013560208201526102208301356001600160401b0380821115612654578384fd5b61266036838701611576565b6040840152610240850135915080821115612679578384fd5b61268536838701611576565b606084015261026085013591508082111561269e578384fd5b506126ab36828601611576565b60808301525092915050565b600061026082360312156126c9578081fd5b6126d161250c565b6126db36846115fc565b81526101a083013560208201526101c083013560408201526101e08301356001600160401b038082111561270d578384fd5b61271936838701611576565b6060840152610200850135915080821115612732578384fd5b61273e36838701611576565b6080840152610220850135915080821115612757578384fd5b61276336838701611576565b60a084015261024085013591508082111561277c578384fd5b5061278936828601611576565b60c08301525092915050565b60005b838110156127b0578181015183820152602001612798565b83811115610e6e5750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c1e57600080fdfea264697066735822122067312d6472fee91db6d3c198cbe2daf6612c356fe9ecf639d436483a7bbe479d64736f6c63430008040033a26469706673582212209e8ea0a28912c45a97c9cef906738ac7172a686d7c5338c34d3378a178fe6bf264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a61461010d5780637f629efc146101155780638da5cb5b14610128578063f2fde38b1461013957600080fd5b806319ab453c1461008d5780631f16a046146100a25780633b716452146100e7578063463a6176146100fa575b600080fd5b6100a061009b3660046107c6565b61014c565b005b6100cb6100b03660046107c6565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6002546100cb906001600160a01b031681565b6100cb6101083660046107c6565b610253565b6100a061027b565b6100cb6101233660046107e0565b6102b1565b6000546001600160a01b03166100cb565b6100a06101473660046107c6565b6104a2565b6000546001600160a01b0316331461017f5760405162461bcd60e51b815260040161017690610878565b60405180910390fd5b6001600160a01b0381166101c15760405162461bcd60e51b815260206004820152600960248201526811a9232fa49d181a1960b91b6044820152606401610176565b600280546001600160a01b0319166001600160a01b038316908117909155604080516303408e4760e41b81529051633408e47091600480820192602092909190829003018186803b15801561021557600080fd5b505afa158015610229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024d9190610812565b60015550565b60006102756102618361053d565b61026961057c565b805190602001206105e4565b92915050565b6000546001600160a01b031633146102a55760405162461bcd60e51b815260040161017690610878565b6102af6000610643565b565b6002546000906001600160a01b03166102f95760405162461bcd60e51b815260206004820152600a60248201526911a9232fa1a91d181a1960b11b6044820152606401610176565b6001600160a01b03831661033c5760405162461bcd60e51b815260206004820152600a6024820152692352465f43523a30343160b01b6044820152606401610176565b6001600160a01b03821661037f5760405162461bcd60e51b815260206004820152600a6024820152692352465f43523a30303760b01b6044820152606401610176565b600061039c600061038f8661053d565b61039761057c565b610693565b6002546001546040516344bd376560e01b81526001600160a01b0392831660048201526024810191909152868216604482015285821660648201523360848201529192508216906344bd37659060a401600060405180830381600087803b15801561040657600080fd5b505af115801561041a573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526003602090815260409182902080548686166001600160a01b0319909116811790915560025483519182529181019390935286841683830152909216606082015290517fe8e811674d167b407a67a22f592a226ade5e34b608e7d56721f82422f3b981979181900360800190a19392505050565b6000546001600160a01b031633146104cc5760405162461bcd60e51b815260040161017690610878565b6001600160a01b0381166105315760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610176565b61053a81610643565b50565b6040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b60606000604051806020016105909061079d565b601f1982820381018352601f90910116604081815230602083015291925082910160408051601f19818403018152908290526105cf9291602001610863565b60405160208183030381529060405291505090565b604080516001600160f81b03196020808301919091526bffffffffffffffffffffffff193060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000905b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080844710156106e65760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606401610176565b82516107345760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401610176565b8383516020850187f590506001600160a01b0381166107955760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401610176565b949350505050565b61291d806108ae83390190565b80356001600160a01b03811681146107c157600080fd5b919050565b6000602082840312156107d7578081fd5b61063c826107aa565b600080604083850312156107f2578081fd5b6107fb836107aa565b9150610809602084016107aa565b90509250929050565b600060208284031215610823578081fd5b5051919050565b60008151815b8181101561084a5760208185018101518683015201610830565b818111156108585782828601525b509290920192915050565b6000610795610872838661082a565b8461082a565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe60a06040523480156200001157600080fd5b506040516200291d3803806200291d8339810160408190526200003491620000a5565b6200003f3362000055565b60601b6001600160601b031916608052620000d5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000b7578081fd5b81516001600160a01b0381168114620000ce578182fd5b9392505050565b60805160601c612822620000fb600039600081816101b4015261037c01526128226000f3fe6080604052600436106100f75760003560e01c80636e2054a91161008a578063ce97653911610059578063ce976539146102b6578063d42030ed146102c9578063f2fde38b146102e9578063fc6bee131461030957600080fd5b80636e2054a914610236578063715018a61461026357806382977466146102785780638da5cb5b1461029857600080fd5b80634ba51437116100c65780634ba51437146101a25780634f64cfc5146101d657806366d003ac146101f65780636c19e7831461021657600080fd5b80633411dbdc146101035780633b716452146101405780633bbed4a01461016057806344bd37651461018257600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b50600454610123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014c57600080fd5b50600154610123906001600160a01b031681565b34801561016c57600080fd5b5061018061017b3660046117e5565b61031c565b005b34801561018e57600080fd5b5061018061019d366004611801565b610371565b3480156101ae57600080fd5b506101237f000000000000000000000000000000000000000000000000000000000000000081565b3480156101e257600080fd5b506101806101f1366004611a9b565b61042e565b34801561020257600080fd5b50600354610123906001600160a01b031681565b34801561022257600080fd5b506101806102313660046117e5565b6104ff565b34801561024257600080fd5b50610256610251366004611915565b61054b565b604051610137919061248f565b34801561026f57600080fd5b506101806106f5565b34801561028457600080fd5b50610180610293366004611aca565b61072b565b3480156102a457600080fd5b506000546001600160a01b0316610123565b6102566102c4366004611956565b610918565b3480156102d557600080fd5b506102566102e4366004611888565b610a4f565b3480156102f557600080fd5b506101806103043660046117e5565b610b86565b610180610317366004611a9b565b610c21565b6000546001600160a01b0316331461034f5760405162461bcd60e51b815260040161034690612042565b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103dc5760405162461bcd60e51b815260206004820152601060248201526f4f4e4c595f5649415f464143544f525960801b6044820152606401610346565b600180546001600160a01b038088166001600160a01b031992831617909255600286905560048054868416908316179055600380549285169290911691909117905561042781610b86565b5050505050565b6000546001600160a01b031633146104585760405162461bcd60e51b815260040161034690612042565b600082116104965760405162461bcd60e51b815260206004820152600b60248201526a11a921afa929231d18181960a91b6044820152606401610346565b6003546104ae9082906001600160a01b031684610d40565b604080516001600160a01b03831681526020810184905233918101919091527f5d760a2d1cc0892ddaea1748093916f51d345b37724db0f69b41574a92adc06f906060015b60405180910390a15050565b6000546001600160a01b031633146105295760405162461bcd60e51b815260040161034690612042565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610553611491565b6004546001600160a01b0316331461062a57600060405180608001604052808861057c90612609565b8152602001876001600160a01b03168152602001868152602001600254815250905060006105ca826040516020016105b491906122e7565b6040516020818303038152906040528686610d69565b6004549091506001600160a01b038083169116146106165760405162461bcd60e51b815260206004820152600960248201526802352435f463a3034360bc1b6044820152606401610346565b851561062757610627873388610d40565b50505b6040517fbd58fe74fd3111b8d37f5a35a025b9cec45d1f01f329eb4e1b86a1428d5d333790610660908890889088903390612455565b60405180910390a16001546040516301362a3560e71b81526001600160a01b0390911690639b151a80906106989089906004016120da565b61020060405180830381600087803b1580156106b357600080fd5b505af11580156106c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106eb9190611997565b9695505050505050565b6000546001600160a01b0316331461071f5760405162461bcd60e51b815260040161034690612042565b6107296000610e12565b565b6004546001600160a01b0316331461084a5760006040518060a00160405280888152602001876001600160a01b03168152602001866001600160a01b03168152602001858152602001600254815250905060006107e9826040516020016107d39190815181526020808301516001600160a01b039081169183019190915260408084015190911690820152606080830151908201526080918201519181019190915260a00190565b6040516020818303038152906040528585610d69565b6004549091506001600160a01b038083169116146108365760405162461bcd60e51b815260206004820152600a60248201526902352435f524c3a3034360b41b6044820152606401610346565b841561084757610847863387610d40565b50505b604080518781526001600160a01b0387811660208301528616818301526060810185905233608082015290517f964a82560b2c071ffde7bc11cc169cfbef31770b4457ff7fa561d5e2bfb515439181900360a00190a1600154600354604051633cc6af3160e21b8152600481018990526001600160a01b038881166024830152918216604482015291169063f31abcc490606401600060405180830381600087803b1580156108f857600080fd5b505af115801561090c573d6000803e3d6000fd5b50505050505050505050565b610920611491565b6004546001600160a01b031633146109e1576000604051806080016040528088610949906126b7565b8152602001876001600160a01b0316815260200186815260200160025481525090506000610981826040516020016105b491906123a6565b6004549091506001600160a01b038083169116146109cd5760405162461bcd60e51b815260206004820152600960248201526802352435f503a3034360bc1b6044820152606401610346565b85156109de576109de873388610d40565b50505b6040517f583ad731037599752e477b0d462b10b6067dab73e63227960e20403a8ee7f7f090610a17908890889088903390612176565b60405180910390a1600154604051636ca2c9b960e11b81526001600160a01b039091169063d9459372906106989089906004016121b0565b610a57611491565b6004546001600160a01b03163314610b18576000604051806080016040528088610a8090612572565b8152602001876001600160a01b0316815260200186815260200160025481525090506000610ab8826040516020016105b4919061225b565b6004549091506001600160a01b03808316911614610b045760405162461bcd60e51b815260206004820152600960248201526802352435f433a3034360bc1b6044820152606401610346565b8515610b1557610b15873388610d40565b50505b6040517fdb26fb99c342114246dbc5580bb4d02519f9250cacf10aafc127b24f755d4e3f90610b4e908890889088903390612455565b60405180910390a1600154604051635f48d15d60e11b81526001600160a01b039091169063be91a2ba90610698908990600401612077565b6000546001600160a01b03163314610bb05760405162461bcd60e51b815260040161034690612042565b6001600160a01b038116610c155760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610346565b610c1e81610e12565b50565b60008211610c5f5760405162461bcd60e51b815260206004820152600b60248201526a11a921afa0a9231d18181960a91b6044820152606401610346565b6001600160a01b038116610caf57813414610caa5760405162461bcd60e51b815260206004820152600b60248201526a2352435f4152463a30303560a81b6044820152606401610346565b610cf7565b3415610ceb5760405162461bcd60e51b815260206004820152600b60248201526a11a921afa0a9231d18181b60a91b6044820152606401610346565b610cf781333085610e62565b604080516001600160a01b03831681526020810184905233918101919091527f1104e763408245681528382e9b9fcd4d8f1b4bce2e83f5ce2be8d1a5ec8323a0906060016104f3565b6001600160a01b03831615610d5f57610d5a838383610e74565b505050565b610d5a8282610e7f565b6000610e08610dcc85805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e8d92505050565b90505b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610e6e84848484610f37565b50505050565b610d5a838383610fa2565b610e898282610fd2565b5050565b6000815160411415610ec15760208201516040830151606084015160001a610eb7868285856110eb565b9350505050610f31565b815160401415610ee95760208201516040830151610ee0858383611294565b92505050610f31565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610346565b92915050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e6e9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526112b4565b6040516001600160a01b038316602482015260448101829052610d5a90849063a9059cbb60e01b90606401610f6b565b804710156110225760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610346565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461106f576040519150601f19603f3d011682016040523d82523d6000602084013e611074565b606091505b5050905080610d5a5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610346565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156111685760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610346565b8360ff16601b148061117d57508360ff16601c145b6111d45760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610346565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611228573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661128b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610346565b95945050505050565b60006001600160ff1b03821660ff83901c601b016106eb868287856110eb565b6000611309826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113869092919063ffffffff16565b805190915015610d5a57808060200190518101906113279190611868565b610d5a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610346565b6060610e08848460008585843b6113df5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610346565b600080866001600160a01b031685876040516113fb9190612013565b60006040518083038185875af1925050503d8060008114611438576040519150601f19603f3d011682016040523d82523d6000602084013e61143d565b606091505b509150915061144d828286611458565b979650505050505050565b60608315611467575081610e0b565b8251156114775782518084602001fd5b8160405162461bcd60e51b8152600401610346919061202f565b6040805161020081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e081019190915290565b8035611520816127d7565b919050565b8051611520816127d7565b60008083601f840112611541578182fd5b5081356001600160401b03811115611557578182fd5b60208301915083602082850101111561156f57600080fd5b9250929050565b600082601f830112611586578081fd5b81356001600160401b03808211156115a0576115a06127c1565b604051601f8301601f19908116603f011681019082821181831017156115c8576115c86127c1565b816040528381528660208588010111156115e0578485fd5b8360208701602083013792830160200193909352509392505050565b60006101a0828403121561160e578081fd5b61161661249e565b905061162182611515565b815261162f60208301611515565b602082015261164060408301611515565b604082015261165160608301611515565b606082015261166260808301611515565b608082015261167360a08301611515565b60a082015261168460c08301611515565b60c082015261169560e08301611515565b60e08201526101006116a8818401611515565b908201526101208281013590820152610140808301359082015261016080830135908201526101809182013591810191909152919050565b600061020082840312156116f2578081fd5b6116fa6124c7565b905061170582611515565b815261171360208301611515565b602082015261172460408301611515565b604082015261173560608301611515565b606082015261174660808301611515565b608082015261175760a08301611515565b60a082015261176860c08301611515565b60c082015261177960e08301611515565b60e082015261010061178c818401611515565b9082015261012082810135908201526101408083013590820152610160808301359082015261018080830135908201526101a080830135908201526101c080830135908201526101e09182013591810191909152919050565b6000602082840312156117f6578081fd5b8135610e0b816127d7565b600080600080600060a08688031215611818578081fd5b8535611823816127d7565b945060208601359350604086013561183a816127d7565b9250606086013561184a816127d7565b9150608086013561185a816127d7565b809150509295509295909350565b600060208284031215611879578081fd5b81518015158114610e0b578182fd5b60008060008060006080868803121561189f578283fd5b85356001600160401b03808211156118b5578485fd5b90870190610240828a0312156118c9578485fd5b9095506020870135906118db826127d7565b90945060408701359350606087013590808211156118f7578283fd5b5061190488828901611530565b969995985093965092949392505050565b60008060008060006080868803121561192c578283fd5b85356001600160401b0380821115611942578485fd5b90870190610280828a0312156118c9578485fd5b60008060008060006080868803121561196d578283fd5b85356001600160401b0380821115611983578485fd5b90870190610260828a0312156118c9578485fd5b600061020082840312156119a9578081fd5b6119b16124c7565b6119ba83611525565b81526119c860208401611525565b60208201526119d960408401611525565b60408201526119ea60608401611525565b60608201526119fb60808401611525565b6080820152611a0c60a08401611525565b60a0820152611a1d60c08401611525565b60c0820152611a2e60e08401611525565b60e0820152610100611a41818501611525565b9082015261012083810151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0928301519281019290925250919050565b60008060408385031215611aad578182fd5b823591506020830135611abf816127d7565b809150509250929050565b60008060008060008060a08789031215611ae2578384fd5b863595506020870135611af4816127d7565b94506040870135611b04816127d7565b93506060870135925060808701356001600160401b03811115611b25578182fd5b611b3189828a01611530565b979a9699509497509295939492505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452611b84816020860160208601612795565b601f01601f19169290920160200192915050565b611bb282611ba583611515565b6001600160a01b03169052565b611bbe60208201611515565b6001600160a01b03166020830152611bd860408201611515565b6001600160a01b03166040830152611bf260608201611515565b6001600160a01b03166060830152611c0c60808201611515565b6001600160a01b03166080830152611c2660a08201611515565b6001600160a01b031660a0830152611c4060c08201611515565b6001600160a01b031660c0830152611c5a60e08201611515565b6001600160a01b031660e0830152610100611c76828201611515565b6001600160a01b03169083015261012081810135908301526101408082013590830152610160808201359083015261018090810135910152565b80516001600160a01b031682526020810151611cd760208401826001600160a01b03169052565b506040810151611cf260408401826001600160a01b03169052565b506060810151611d0d60608401826001600160a01b03169052565b506080810151611d2860808401826001600160a01b03169052565b5060a0810151611d4360a08401826001600160a01b03169052565b5060c0810151611d5e60c08401826001600160a01b03169052565b5060e0810151611d7960e08401826001600160a01b03169052565b50610100818101516001600160a01b03169083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b611dc882611ba583611515565b611dd460208201611515565b6001600160a01b03166020830152611dee60408201611515565b6001600160a01b03166040830152611e0860608201611515565b6001600160a01b03166060830152611e2260808201611515565b6001600160a01b03166080830152611e3c60a08201611515565b6001600160a01b031660a0830152611e5660c08201611515565b6001600160a01b031660c0830152611e7060e08201611515565b6001600160a01b031660e0830152610100611e8c828201611515565b6001600160a01b03169083015261012081810135908301526101408082013590830152610160808201359083015261018080820135908301526101a080820135908301526101c080820135908301526101e090810135910152565b80516001600160a01b031682526020810151611f0e60208401826001600160a01b03169052565b506040810151611f2960408401826001600160a01b03169052565b506060810151611f4460608401826001600160a01b03169052565b506080810151611f5f60808401826001600160a01b03169052565b5060a0810151611f7a60a08401826001600160a01b03169052565b5060c0810151611f9560c08401826001600160a01b03169052565b5060e0810151611fb060e08401826001600160a01b03169052565b50610100818101516001600160a01b03169083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e090810151910152565b60008251612025818460208701612795565b9190910192915050565b602081526000610e0b6020830184611b6c565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602081526120886020820183611dbb565b600061209861020084018461252e565b61024061022081818701526120b261026087018486611b43565b93506120c08188018861252e565b878603601f1901848901529350905061144d848483611b43565b602081526120eb6020820183611dbb565b6000610220610200840135818401526121068185018561252e565b915061028061024081818701526121226102a087018585611b43565b93506121308188018861252e565b93509050601f1961026081888703018189015261214e868685611b43565b955061215c818a018a61252e565b95509250508087860301838801525061144d848483611b43565b61020081016121858287611b98565b6001600160a01b039485166101a08301526101c082019390935292166101e090920191909152919050565b602081526121c16020820183611b98565b60006101c06101a0840135818401526101e081850135818501526121e78186018661252e565b92509050610260610200818187015261220561028087018585611b43565b93506122138188018861252e565b93509050601f19610220818887030181890152612231868685611b43565b955061223f818a018a61252e565b955092505061024081888703018189015261214e868685611b43565b60208152600082516080602084015261227860a084018251611ee7565b60208101516102406102a08501526122946102e0850182611b6c565b905060408201519150609f19848203016102c08501526122b48183611b6c565b91505060018060a01b03602085015116604084015260408401516060840152606084015160808401528091505092915050565b60208152600082516080602084015261230460a084018251611ee7565b60208101516102a084015260408101516102806102c085015261232b610320850182611b6c565b90506060820151609f1980868403016102e087015261234a8383611b6c565b9250608084015193508086840301610300870152505061236a8183611b6c565b915050602084015161238760408501826001600160a01b03169052565b5060408401516060840152606084015160808401528091505092915050565b6020815260008251608060208401526123c360a084018251611cb0565b6020810151610240840152604081015161026081818601526060830151915080610280860152506123f8610300850182611b6c565b90506080820151609f1980868403016102a08701526124178383611b6c565b925060a0840151915080868403016102c08701526124358383611b6c565b925060c0840151935080868403016102e0870152505061236a8183611b6c565b61026081016124648287611dbb565b6001600160a01b03948516610200830152610220820193909352921661024090920191909152919050565b6102008101610f318284611ee7565b6040516101a081016001600160401b03811182821017156124c1576124c16127c1565b60405290565b60405161020081016001600160401b03811182821017156124c1576124c16127c1565b60405160a081016001600160401b03811182821017156124c1576124c16127c1565b60405160e081016001600160401b03811182821017156124c1576124c16127c1565b6000808335601e19843603018112612544578283fd5b83016020810192503590506001600160401b0381111561256357600080fd5b80360383131561156f57600080fd5b60006102408236031215612584578081fd5b604051606081016001600160401b0382821081831117156125a7576125a76127c1565b816040526125b536866116e0565b83526102008501359150808211156125cb578384fd5b6125d736838701611576565b60208401526102208501359150808211156125f0578384fd5b506125fd36828601611576565b60408301525092915050565b6000610280823603121561261b578081fd5b6126236124ea565b61262d36846116e0565b815261020083013560208201526102208301356001600160401b0380821115612654578384fd5b61266036838701611576565b6040840152610240850135915080821115612679578384fd5b61268536838701611576565b606084015261026085013591508082111561269e578384fd5b506126ab36828601611576565b60808301525092915050565b600061026082360312156126c9578081fd5b6126d161250c565b6126db36846115fc565b81526101a083013560208201526101c083013560408201526101e08301356001600160401b038082111561270d578384fd5b61271936838701611576565b6060840152610200850135915080821115612732578384fd5b61273e36838701611576565b6080840152610220850135915080821115612757578384fd5b61276336838701611576565b60a084015261024085013591508082111561277c578384fd5b5061278936828601611576565b60c08301525092915050565b60005b838110156127b0578181015183820152602001612798565b83811115610e6e5750506000910152565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610c1e57600080fdfea264697066735822122067312d6472fee91db6d3c198cbe2daf6612c356fe9ecf639d436483a7bbe479d64736f6c63430008040033a26469706673582212209e8ea0a28912c45a97c9cef906738ac7172a686d7c5338c34d3378a178fe6bf264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createRouter(address,address)": {
        "params": {
          "recipient": "address recipient",
          "routerSigner": "address router signer"
        }
      },
      "getRouterAddress(address)": {
        "params": {
          "routerSigner": "address router signer"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "chainId": {
        "details": "The stored chain id of the contract, may be passed in to avoid any      evm issues"
      },
      "routerAddresses": {
        "details": "Mapping of routerSigner to created Router contract address"
      },
      "transactionManager": {
        "details": "The transaction Manager contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createRouter(address,address)": {
        "notice": "Allows us to create new router contract"
      },
      "getRouterAddress(address)": {
        "notice": "Allows us to get the address for a new router contract created via `createRouter`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/RouterFactory.sol:RouterFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3694,
        "contract": "contracts/RouterFactory.sol:RouterFactory",
        "label": "chainId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3698,
        "contract": "contracts/RouterFactory.sol:RouterFactory",
        "label": "transactionManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITransactionManager)6043"
      },
      {
        "astId": 3703,
        "contract": "contracts/RouterFactory.sol:RouterFactory",
        "label": "routerAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITransactionManager)6043": {
        "encoding": "inplace",
        "label": "contract ITransactionManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}